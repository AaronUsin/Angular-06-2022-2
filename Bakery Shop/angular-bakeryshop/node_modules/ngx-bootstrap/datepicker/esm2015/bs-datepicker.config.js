/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * For date range picker there are `BsDaterangepickerConfig` which inherits all properties,
 * except `displayMonths`, for range picker it default to `2`
 */
import * as ɵngcc0 from '@angular/core';
export class BsDatepickerConfig {
    constructor() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * CSS class which will be applied to datepicker container,
         * usually used to set color theme
         */
        this.containerClass = 'theme-green';
        // DatepickerRenderOptions
        this.displayMonths = 1;
        /**
         * Allows to hide week numbers in datepicker
         */
        this.showWeekNumbers = true;
        this.dateInputFormat = 'L';
        // range picker
        this.rangeSeparator = ' - ';
        /**
         * Date format for date range input field
         */
        this.rangeInputFormat = 'L';
        // DatepickerFormatOptions
        this.monthTitle = 'MMMM';
        this.yearTitle = 'YYYY';
        this.dayLabel = 'D';
        this.monthLabel = 'MMMM';
        this.yearLabel = 'YYYY';
        this.weekNumbers = 'w';
    }
}
BsDatepickerConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: BsDatepickerConfig, factory: function BsDatepickerConfig_Factory(t) { return new (t || BsDatepickerConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BsDatepickerConfig, [{
        type: Injectable
    }], function () { return []; }, { constructor: [], adaptivePosition: [], isAnimated: [], containerClass: [], displayMonths: [], showWeekNumbers: [], dateInputFormat: [], rangeSeparator: [], rangeInputFormat: [], monthTitle: [], yearTitle: [], dayLabel: [], monthLabel: [], yearLabel: [], weekNumbers: [] });
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    BsDatepickerConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    BsDatepickerConfig.prototype.isAnimated;
    /** @type {?} */
    BsDatepickerConfig.prototype.value;
    /** @type {?} */
    BsDatepickerConfig.prototype.isDisabled;
    /**
     * Default min date for all date/range pickers
     * @type {?}
     */
    BsDatepickerConfig.prototype.minDate;
    /**
     * Default max date for all date/range pickers
     * @type {?}
     */
    BsDatepickerConfig.prototype.maxDate;
    /**
     * Default date custom classes for all date/range pickers
     * @type {?}
     */
    BsDatepickerConfig.prototype.dateCustomClasses;
    /** @type {?} */
    BsDatepickerConfig.prototype.daysDisabled;
    /**
     * Disable specific dates
     * @type {?}
     */
    BsDatepickerConfig.prototype.datesDisabled;
    /**
     * Makes dates from other months active
     * @type {?}
     */
    BsDatepickerConfig.prototype.selectFromOtherMonth;
    /**
     * Makes dates from other months active
     * @type {?}
     */
    BsDatepickerConfig.prototype.selectWeek;
    /**
     * Add class to current day
     * @type {?}
     */
    BsDatepickerConfig.prototype.customTodayClass;
    /**
     * Default mode for all date pickers
     * @type {?}
     */
    BsDatepickerConfig.prototype.minMode;
    /**
     * CSS class which will be applied to datepicker container,
     * usually used to set color theme
     * @type {?}
     */
    BsDatepickerConfig.prototype.containerClass;
    /** @type {?} */
    BsDatepickerConfig.prototype.displayMonths;
    /**
     * Allows to hide week numbers in datepicker
     * @type {?}
     */
    BsDatepickerConfig.prototype.showWeekNumbers;
    /** @type {?} */
    BsDatepickerConfig.prototype.dateInputFormat;
    /** @type {?} */
    BsDatepickerConfig.prototype.rangeSeparator;
    /**
     * Date format for date range input field
     * @type {?}
     */
    BsDatepickerConfig.prototype.rangeInputFormat;
    /** @type {?} */
    BsDatepickerConfig.prototype.monthTitle;
    /** @type {?} */
    BsDatepickerConfig.prototype.yearTitle;
    /** @type {?} */
    BsDatepickerConfig.prototype.dayLabel;
    /** @type {?} */
    BsDatepickerConfig.prototype.monthLabel;
    /** @type {?} */
    BsDatepickerConfig.prototype.yearLabel;
    /** @type {?} */
    BsDatepickerConfig.prototype.weekNumbers;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL2Fhcm9uL09uZURyaXZlL0Rlc2t0b3AvQW5ndWxhci0wNi0yMDIyLTIvQmFrZXJ5IFNob3AvYW5ndWxhci1iYWtlcnlzaG9wL25vZGVfbW9kdWxlcy9uZ3gtYm9vdHN0cmFwL2RhdGVwaWNrZXIvZXNtMjAxNS9icy1kYXRlcGlja2VyLmNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0NDLHNUQUdDIiwiZmlsZSI6ImJzLWRhdGVwaWNrZXIuY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogRm9yIGRhdGUgcmFuZ2UgcGlja2VyIHRoZXJlIGFyZSBgQnNEYXRlcmFuZ2VwaWNrZXJDb25maWdgIHdoaWNoIGluaGVyaXRzIGFsbCBwcm9wZXJ0aWVzLFxuICogZXhjZXB0IGBkaXNwbGF5TW9udGhzYCwgZm9yIHJhbmdlIHBpY2tlciBpdCBkZWZhdWx0IHRvIGAyYFxuICovXG5leHBvcnQgY2xhc3MgQnNEYXRlcGlja2VyQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldHMgdXNlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFkYXB0aXZlUG9zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHR1cm4gb24vb2ZmIGFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0FuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDU1MgY2xhc3Mgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIGRhdGVwaWNrZXIgY29udGFpbmVyLFxuICAgICAgICAgKiB1c3VhbGx5IHVzZWQgdG8gc2V0IGNvbG9yIHRoZW1lXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnRhaW5lckNsYXNzID0gJ3RoZW1lLWdyZWVuJztcbiAgICAgICAgLy8gRGF0ZXBpY2tlclJlbmRlck9wdGlvbnNcbiAgICAgICAgdGhpcy5kaXNwbGF5TW9udGhzID0gMTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbG93cyB0byBoaWRlIHdlZWsgbnVtYmVycyBpbiBkYXRlcGlja2VyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3dXZWVrTnVtYmVycyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0ZUlucHV0Rm9ybWF0ID0gJ0wnO1xuICAgICAgICAvLyByYW5nZSBwaWNrZXJcbiAgICAgICAgdGhpcy5yYW5nZVNlcGFyYXRvciA9ICcgLSAnO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGF0ZSBmb3JtYXQgZm9yIGRhdGUgcmFuZ2UgaW5wdXQgZmllbGRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmFuZ2VJbnB1dEZvcm1hdCA9ICdMJztcbiAgICAgICAgLy8gRGF0ZXBpY2tlckZvcm1hdE9wdGlvbnNcbiAgICAgICAgdGhpcy5tb250aFRpdGxlID0gJ01NTU0nO1xuICAgICAgICB0aGlzLnllYXJUaXRsZSA9ICdZWVlZJztcbiAgICAgICAgdGhpcy5kYXlMYWJlbCA9ICdEJztcbiAgICAgICAgdGhpcy5tb250aExhYmVsID0gJ01NTU0nO1xuICAgICAgICB0aGlzLnllYXJMYWJlbCA9ICdZWVlZJztcbiAgICAgICAgdGhpcy53ZWVrTnVtYmVycyA9ICd3JztcbiAgICB9XG59XG5Cc0RhdGVwaWNrZXJDb25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIHNldHMgdXNlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5hZGFwdGl2ZVBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIHR1cm4gb24vb2ZmIGFuaW1hdGlvblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIEJzRGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuaXNBbmltYXRlZDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS52YWx1ZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5pc0Rpc2FibGVkO1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgbWluIGRhdGUgZm9yIGFsbCBkYXRlL3JhbmdlIHBpY2tlcnNcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLm1pbkRhdGU7XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBtYXggZGF0ZSBmb3IgYWxsIGRhdGUvcmFuZ2UgcGlja2Vyc1xuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIEJzRGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubWF4RGF0ZTtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGRhdGUgY3VzdG9tIGNsYXNzZXMgZm9yIGFsbCBkYXRlL3JhbmdlIHBpY2tlcnNcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLmRhdGVDdXN0b21DbGFzc2VzO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLmRheXNEaXNhYmxlZDtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHNwZWNpZmljIGRhdGVzXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5kYXRlc0Rpc2FibGVkO1xuICAgIC8qKlxuICAgICAqIE1ha2VzIGRhdGVzIGZyb20gb3RoZXIgbW9udGhzIGFjdGl2ZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIEJzRGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuc2VsZWN0RnJvbU90aGVyTW9udGg7XG4gICAgLyoqXG4gICAgICogTWFrZXMgZGF0ZXMgZnJvbSBvdGhlciBtb250aHMgYWN0aXZlXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zZWxlY3RXZWVrO1xuICAgIC8qKlxuICAgICAqIEFkZCBjbGFzcyB0byBjdXJyZW50IGRheVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIEJzRGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuY3VzdG9tVG9kYXlDbGFzcztcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IG1vZGUgZm9yIGFsbCBkYXRlIHBpY2tlcnNcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLm1pbk1vZGU7XG4gICAgLyoqXG4gICAgICogQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byBkYXRlcGlja2VyIGNvbnRhaW5lcixcbiAgICAgKiB1c3VhbGx5IHVzZWQgdG8gc2V0IGNvbG9yIHRoZW1lXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5jb250YWluZXJDbGFzcztcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5kaXNwbGF5TW9udGhzO1xuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBoaWRlIHdlZWsgbnVtYmVycyBpbiBkYXRlcGlja2VyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zaG93V2Vla051bWJlcnM7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIEJzRGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuZGF0ZUlucHV0Rm9ybWF0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLnJhbmdlU2VwYXJhdG9yO1xuICAgIC8qKlxuICAgICAqIERhdGUgZm9ybWF0IGZvciBkYXRlIHJhbmdlIGlucHV0IGZpZWxkXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgQnNEYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5yYW5nZUlucHV0Rm9ybWF0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLm1vbnRoVGl0bGU7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIEJzRGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUueWVhclRpdGxlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLmRheUxhYmVsO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLm1vbnRoTGFiZWw7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIEJzRGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUueWVhckxhYmVsO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBCc0RhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLndlZWtOdW1iZXJzO1xufVxuIl19