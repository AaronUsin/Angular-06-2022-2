/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Provides default configuration values for timepicker
 */
import * as ɵngcc0 from '@angular/core';
var TimepickerConfig = /** @class */ (function () {
    function TimepickerConfig() {
        /**
         * hours change step
         */
        this.hourStep = 1;
        /**
         * hours change step
         */
        this.minuteStep = 5;
        /**
         * seconds changes step
         */
        this.secondsStep = 10;
        /**
         * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
         */
        this.showMeridian = true;
        /**
         * meridian labels based on locale
         */
        this.meridians = ['AM', 'PM'];
        /**
         * if true hours and minutes fields will be readonly
         */
        this.readonlyInput = false;
        /**
         * if true hours and minutes fields will be disabled
         */
        this.disabled = false;
        /**
         * if true scroll inside hours and minutes inputs will change time
         */
        this.mousewheel = true;
        /**
         * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
         */
        this.arrowkeys = true;
        /**
         * if true spinner arrows above and below the inputs will be shown
         */
        this.showSpinners = true;
        /**
         * show seconds in timepicker
         */
        this.showSeconds = false;
        /**
         * show minutes in timepicker
         */
        this.showMinutes = true;
    }
TimepickerConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TimepickerConfig, factory: function TimepickerConfig_Factory(t) { return new (t || TimepickerConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TimepickerConfig, [{
        type: Injectable
    }], function () { return []; }, { hourStep: [], minuteStep: [], secondsStep: [], showMeridian: [], meridians: [], readonlyInput: [], disabled: [], mousewheel: [], arrowkeys: [], showSpinners: [], showSeconds: [], showMinutes: [] });
    return TimepickerConfig;
}());
export { TimepickerConfig };
if (false) {
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.hourStep;
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.minuteStep;
    /**
     * seconds changes step
     * @type {?}
     */
    TimepickerConfig.prototype.secondsStep;
    /**
     * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
     * @type {?}
     */
    TimepickerConfig.prototype.showMeridian;
    /**
     * meridian labels based on locale
     * @type {?}
     */
    TimepickerConfig.prototype.meridians;
    /**
     * if true hours and minutes fields will be readonly
     * @type {?}
     */
    TimepickerConfig.prototype.readonlyInput;
    /**
     * if true hours and minutes fields will be disabled
     * @type {?}
     */
    TimepickerConfig.prototype.disabled;
    /**
     * if true scroll inside hours and minutes inputs will change time
     * @type {?}
     */
    TimepickerConfig.prototype.mousewheel;
    /**
     * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
     * @type {?}
     */
    TimepickerConfig.prototype.arrowkeys;
    /**
     * if true spinner arrows above and below the inputs will be shown
     * @type {?}
     */
    TimepickerConfig.prototype.showSpinners;
    /**
     * show seconds in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showSeconds;
    /**
     * show minutes in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showMinutes;
    /**
     * minimum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.min;
    /**
     * maximum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.max;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL2Fhcm9uL09uZURyaXZlL0Rlc2t0b3AvQW5ndWxhci0wNi0yMDIyLTIvQmFrZXJ5IFNob3AvYW5ndWxhci1iYWtlcnlzaG9wL25vZGVfbW9kdWxlcy9uZ3gtYm9vdHN0cmFwL3RpbWVwaWNrZXIvZXNtNS90aW1lcGlja2VyLmNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBa0RLOzs7OzRPQUdDIiwiZmlsZSI6InRpbWVwaWNrZXIuY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogUHJvdmlkZXMgZGVmYXVsdCBjb25maWd1cmF0aW9uIHZhbHVlcyBmb3IgdGltZXBpY2tlclxuICovXG52YXIgVGltZXBpY2tlckNvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lcGlja2VyQ29uZmlnKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogaG91cnMgY2hhbmdlIHN0ZXBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaG91clN0ZXAgPSAxO1xuICAgICAgICAvKipcbiAgICAgICAgICogaG91cnMgY2hhbmdlIHN0ZXBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWludXRlU3RlcCA9IDU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZWNvbmRzIGNoYW5nZXMgc3RlcFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWNvbmRzU3RlcCA9IDEwO1xuICAgICAgICAvKipcbiAgICAgICAgICogaWYgdHJ1ZSB3b3JrcyBpbiAxMkggbW9kZSBhbmQgZGlzcGxheXMgQU0vUE0uIElmIGZhbHNlIHdvcmtzIGluIDI0SCBtb2RlIGFuZCBoaWRlcyBBTS9QTVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaG93TWVyaWRpYW4gPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogbWVyaWRpYW4gbGFiZWxzIGJhc2VkIG9uIGxvY2FsZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tZXJpZGlhbnMgPSBbJ0FNJywgJ1BNJ107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlYWRvbmx5SW5wdXQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRydWUgaG91cnMgYW5kIG1pbnV0ZXMgZmllbGRzIHdpbGwgYmUgZGlzYWJsZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRydWUgc2Nyb2xsIGluc2lkZSBob3VycyBhbmQgbWludXRlcyBpbnB1dHMgd2lsbCBjaGFuZ2UgdGltZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3VzZXdoZWVsID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRydWUgdGhlIHZhbHVlcyBvZiBob3VycyBhbmQgbWludXRlcyBjYW4gYmUgY2hhbmdlZCB1c2luZyB0aGUgdXAvZG93biBhcnJvdyBrZXlzIG9uIHRoZSBrZXlib2FyZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hcnJvd2tleXMgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogaWYgdHJ1ZSBzcGlubmVyIGFycm93cyBhYm92ZSBhbmQgYmVsb3cgdGhlIGlucHV0cyB3aWxsIGJlIHNob3duXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3dTcGlubmVycyA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzaG93IHNlY29uZHMgaW4gdGltZXBpY2tlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaG93U2Vjb25kcyA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogc2hvdyBtaW51dGVzIGluIHRpbWVwaWNrZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvd01pbnV0ZXMgPSB0cnVlO1xuICAgIH1cbiAgICBUaW1lcGlja2VyQ29uZmlnLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gVGltZXBpY2tlckNvbmZpZztcbn0oKSk7XG5leHBvcnQgeyBUaW1lcGlja2VyQ29uZmlnIH07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBob3VycyBjaGFuZ2Ugc3RlcFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLmhvdXJTdGVwO1xuICAgIC8qKlxuICAgICAqIGhvdXJzIGNoYW5nZSBzdGVwXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubWludXRlU3RlcDtcbiAgICAvKipcbiAgICAgKiBzZWNvbmRzIGNoYW5nZXMgc3RlcFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNlY29uZHNTdGVwO1xuICAgIC8qKlxuICAgICAqIGlmIHRydWUgd29ya3MgaW4gMTJIIG1vZGUgYW5kIGRpc3BsYXlzIEFNL1BNLiBJZiBmYWxzZSB3b3JrcyBpbiAyNEggbW9kZSBhbmQgaGlkZXMgQU0vUE1cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zaG93TWVyaWRpYW47XG4gICAgLyoqXG4gICAgICogbWVyaWRpYW4gbGFiZWxzIGJhc2VkIG9uIGxvY2FsZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLm1lcmlkaWFucztcbiAgICAvKipcbiAgICAgKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIHJlYWRvbmx5XG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUucmVhZG9ubHlJbnB1dDtcbiAgICAvKipcbiAgICAgKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIGRpc2FibGVkXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuZGlzYWJsZWQ7XG4gICAgLyoqXG4gICAgICogaWYgdHJ1ZSBzY3JvbGwgaW5zaWRlIGhvdXJzIGFuZCBtaW51dGVzIGlucHV0cyB3aWxsIGNoYW5nZSB0aW1lXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubW91c2V3aGVlbDtcbiAgICAvKipcbiAgICAgKiBpZiB0cnVlIHRoZSB2YWx1ZXMgb2YgaG91cnMgYW5kIG1pbnV0ZXMgY2FuIGJlIGNoYW5nZWQgdXNpbmcgdGhlIHVwL2Rvd24gYXJyb3cga2V5cyBvbiB0aGUga2V5Ym9hcmRcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5hcnJvd2tleXM7XG4gICAgLyoqXG4gICAgICogaWYgdHJ1ZSBzcGlubmVyIGFycm93cyBhYm92ZSBhbmQgYmVsb3cgdGhlIGlucHV0cyB3aWxsIGJlIHNob3duXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuc2hvd1NwaW5uZXJzO1xuICAgIC8qKlxuICAgICAqIHNob3cgc2Vjb25kcyBpbiB0aW1lcGlja2VyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuc2hvd1NlY29uZHM7XG4gICAgLyoqXG4gICAgICogc2hvdyBtaW51dGVzIGluIHRpbWVwaWNrZXJcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zaG93TWludXRlcztcbiAgICAvKipcbiAgICAgKiBtaW5pbXVtIHRpbWUgdXNlciBjYW4gc2VsZWN0XG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubWluO1xuICAgIC8qKlxuICAgICAqIG1heGltdW0gdGltZSB1c2VyIGNhbiBzZWxlY3RcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5tYXg7XG59XG4iXX0=