/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ModalOptions = /** @class */ (function () {
    function ModalOptions() {
    }
ModalOptions.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: function ModalOptions_Factory(t) { return new (t || ModalOptions)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], function () { return []; }, null);
    return ModalOptions;
}());
export { ModalOptions };
if (false) {
    /**
     *  Includes a modal-backdrop element. Alternatively,
     *  specify static for a backdrop which doesn't close the modal on click.
     * @type {?}
     */
    ModalOptions.prototype.backdrop;
    /**
     * Closes the modal when escape key is pressed.
     * @type {?}
     */
    ModalOptions.prototype.keyboard;
    /** @type {?} */
    ModalOptions.prototype.focus;
    /**
     * Shows the modal when initialized.
     * @type {?}
     */
    ModalOptions.prototype.show;
    /**
     * Ignore the backdrop click
     * @type {?}
     */
    ModalOptions.prototype.ignoreBackdropClick;
    /**
     * Css class for opened modal
     * @type {?}
     */
    ModalOptions.prototype.class;
    /**
     * Toggle animation
     * @type {?}
     */
    ModalOptions.prototype.animated;
    /**
     * Modal data
     * @type {?}
     */
    ModalOptions.prototype.initialState;
}
/** @type {?} */
export var modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
/** @type {?} */
export var CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
export var SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
/** @type {?} */
export var TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
export var DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL2Fhcm9uL09uZURyaXZlL0Rlc2t0b3AvQW5ndWxhci0wNi0yMDIyLTIvTm9ydGFsaSBwcm9vdml0w7bDti9hbmd1bGFyLWJha2VyeXNob3Avbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvbW9kYWwvZXNtNS9tb2RhbC1vcHRpb25zLmNsYXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7S0FFSzs7OzswQ0FHQyIsImZpbGUiOiJtb2RhbC1vcHRpb25zLmNsYXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbnZhciBNb2RhbE9wdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWxPcHRpb25zKCkge1xuICAgIH1cbiAgICBNb2RhbE9wdGlvbnMuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbiAgICBdO1xuICAgIHJldHVybiBNb2RhbE9wdGlvbnM7XG59KCkpO1xuZXhwb3J0IHsgTW9kYWxPcHRpb25zIH07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiAgSW5jbHVkZXMgYSBtb2RhbC1iYWNrZHJvcCBlbGVtZW50LiBBbHRlcm5hdGl2ZWx5LFxuICAgICAqICBzcGVjaWZ5IHN0YXRpYyBmb3IgYSBiYWNrZHJvcCB3aGljaCBkb2Vzbid0IGNsb3NlIHRoZSBtb2RhbCBvbiBjbGljay5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmJhY2tkcm9wO1xuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgbW9kYWwgd2hlbiBlc2NhcGUga2V5IGlzIHByZXNzZWQuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5rZXlib2FyZDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5mb2N1cztcbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgbW9kYWwgd2hlbiBpbml0aWFsaXplZC5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLnNob3c7XG4gICAgLyoqXG4gICAgICogSWdub3JlIHRoZSBiYWNrZHJvcCBjbGlja1xuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuaWdub3JlQmFja2Ryb3BDbGljaztcbiAgICAvKipcbiAgICAgKiBDc3MgY2xhc3MgZm9yIG9wZW5lZCBtb2RhbFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuY2xhc3M7XG4gICAgLyoqXG4gICAgICogVG9nZ2xlIGFuaW1hdGlvblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYW5pbWF0ZWQ7XG4gICAgLyoqXG4gICAgICogTW9kYWwgZGF0YVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuaW5pdGlhbFN0YXRlO1xufVxuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IHZhciBtb2RhbENvbmZpZ0RlZmF1bHRzID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIGZvY3VzOiB0cnVlLFxuICAgIHNob3c6IGZhbHNlLFxuICAgIGlnbm9yZUJhY2tkcm9wQ2xpY2s6IGZhbHNlLFxuICAgIGNsYXNzOiAnJyxcbiAgICBhbmltYXRlZDogdHJ1ZSxcbiAgICBpbml0aWFsU3RhdGU6IHt9XG59O1xuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IHZhciBDTEFTU19OQU1FID0ge1xuICAgIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJyxcbiAgICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICBPUEVOOiAnbW9kYWwtb3BlbicsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIElOOiAnaW4nLFxuICAgIC8vIGJzM1xuICAgIFNIT1c6ICdzaG93JyAvLyBiczRcbn07XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgdmFyIFNFTEVDVE9SID0ge1xuICAgIERJQUxPRzogJy5tb2RhbC1kaWFsb2cnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLFxuICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gICAgRklYRURfQ09OVEVOVDogJy5uYXZiYXItZml4ZWQtdG9wLCAubmF2YmFyLWZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkJ1xufTtcbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCB2YXIgVFJBTlNJVElPTl9EVVJBVElPTlMgPSB7XG4gICAgTU9EQUw6IDMwMCxcbiAgICBCQUNLRFJPUDogMTUwXG59O1xuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IHZhciBESVNNSVNTX1JFQVNPTlMgPSB7XG4gICAgQkFDS1JET1A6ICdiYWNrZHJvcC1jbGljaycsXG4gICAgRVNDOiAnZXNjJ1xufTtcbiJdfQ==