/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for tooltip
 */
import * as ɵngcc0 from '@angular/core';
var TooltipConfig = /** @class */ (function () {
    function TooltipConfig() {
        /**
         * sets disable adaptive position
         */
        this.adaptivePosition = true;
        /**
         * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
         */
        this.placement = 'top';
        /**
         * array of event names which triggers tooltip opening
         */
        this.triggers = 'hover focus';
        /**
         * delay before showing the tooltip
         */
        this.delay = 0;
    }
TooltipConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TooltipConfig, factory: function TooltipConfig_Factory(t) { return new (t || TooltipConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TooltipConfig, [{
        type: Injectable
    }], function () { return []; }, { adaptivePosition: [], placement: [], triggers: [], delay: [] });
    return TooltipConfig;
}());
export { TooltipConfig };
if (false) {
    /**
     * sets disable adaptive position
     * @type {?}
     */
    TooltipConfig.prototype.adaptivePosition;
    /**
     * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
     * @type {?}
     */
    TooltipConfig.prototype.placement;
    /**
     * array of event names which triggers tooltip opening
     * @type {?}
     */
    TooltipConfig.prototype.triggers;
    /**
     * a selector specifying the element the tooltip should be appended to.
     * @type {?}
     */
    TooltipConfig.prototype.container;
    /**
     * delay before showing the tooltip
     * @type {?}
     */
    TooltipConfig.prototype.delay;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL2Fhcm9uL09uZURyaXZlL0Rlc2t0b3AvQW5ndWxhci0wNi0yMDIyLTIvTm9ydGFsaSBwcm9vdml0w7bDti9hbmd1bGFyLWJha2VyeXNob3Avbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvdG9vbHRpcC9lc201L3Rvb2x0aXAuY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBa0JLOzs7O3NHQUdDIiwiZmlsZSI6InRvb2x0aXAuY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogRGVmYXVsdCB2YWx1ZXMgcHJvdmlkZXIgZm9yIHRvb2x0aXBcbiAqL1xudmFyIFRvb2x0aXBDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9vbHRpcENvbmZpZygpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldHMgZGlzYWJsZSBhZGFwdGl2ZSBwb3NpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGFwdGl2ZVBvc2l0aW9uID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRvb2x0aXAgcGxhY2VtZW50LCBzdXBwb3J0ZWQgcG9zaXRpb25zOiAndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0J1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wbGFjZW1lbnQgPSAndG9wJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFycmF5IG9mIGV2ZW50IG5hbWVzIHdoaWNoIHRyaWdnZXJzIHRvb2x0aXAgb3BlbmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmlnZ2VycyA9ICdob3ZlciBmb2N1cyc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZWxheSBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWxheSA9IDA7XG4gICAgfVxuICAgIFRvb2x0aXBDb25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbiAgICBdO1xuICAgIHJldHVybiBUb29sdGlwQ29uZmlnO1xufSgpKTtcbmV4cG9ydCB7IFRvb2x0aXBDb25maWcgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIHNldHMgZGlzYWJsZSBhZGFwdGl2ZSBwb3NpdGlvblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRvb2x0aXBDb25maWcucHJvdG90eXBlLmFkYXB0aXZlUG9zaXRpb247XG4gICAgLyoqXG4gICAgICogdG9vbHRpcCBwbGFjZW1lbnQsIHN1cHBvcnRlZCBwb3NpdGlvbnM6ICd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVG9vbHRpcENvbmZpZy5wcm90b3R5cGUucGxhY2VtZW50O1xuICAgIC8qKlxuICAgICAqIGFycmF5IG9mIGV2ZW50IG5hbWVzIHdoaWNoIHRyaWdnZXJzIHRvb2x0aXAgb3BlbmluZ1xuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRvb2x0aXBDb25maWcucHJvdG90eXBlLnRyaWdnZXJzO1xuICAgIC8qKlxuICAgICAqIGEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCB0aGUgdG9vbHRpcCBzaG91bGQgYmUgYXBwZW5kZWQgdG8uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVG9vbHRpcENvbmZpZy5wcm90b3R5cGUuY29udGFpbmVyO1xuICAgIC8qKlxuICAgICAqIGRlbGF5IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVG9vbHRpcENvbmZpZy5wcm90b3R5cGUuZGVsYXk7XG59XG4iXX0=