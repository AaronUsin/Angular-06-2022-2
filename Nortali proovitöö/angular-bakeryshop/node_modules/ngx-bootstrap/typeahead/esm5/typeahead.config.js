/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for typeahead
 */
import * as ɵngcc0 from '@angular/core';
var TypeaheadConfig = /** @class */ (function () {
    function TypeaheadConfig() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to active/inactive the first item in typeahead container
         */
        this.isFirstItemActive = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
TypeaheadConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TypeaheadConfig, factory: function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable
    }], function () { return []; }, { adaptivePosition: [], isAnimated: [], hideResultsOnBlur: [], selectFirstItem: [], isFirstItemActive: [], minLength: [] });
    return TypeaheadConfig;
}());
export { TypeaheadConfig };
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    TypeaheadConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    TypeaheadConfig.prototype.isAnimated;
    /**
     * used to hide results on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.hideResultsOnBlur;
    /**
     * used to choose the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.selectFirstItem;
    /**
     * used to active/inactive the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.isFirstItemActive;
    /**
     * used to choose set minimal no of characters that needs to
     * be entered before typeahead kicks-in
     * @type {?}
     */
    TypeaheadConfig.prototype.minLength;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL2Fhcm9uL09uZURyaXZlL0Rlc2t0b3AvQW5ndWxhci0wNi0yMDIyLTIvTm9ydGFsaSBwcm9vdml0w7bDti9hbmd1bGFyLWJha2VyeXNob3Avbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvdHlwZWFoZWFkL2VzbTUvdHlwZWFoZWFkLmNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTJCSzs7OztnS0FHQyIsImZpbGUiOiJ0eXBlYWhlYWQuY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogRGVmYXVsdCB2YWx1ZXMgcHJvdmlkZXIgZm9yIHR5cGVhaGVhZFxuICovXG52YXIgVHlwZWFoZWFkQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFR5cGVhaGVhZENvbmZpZygpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldHMgdXNlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFkYXB0aXZlUG9zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHR1cm4gb24vb2ZmIGFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0FuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGhpZGUgcmVzdWx0cyBvbiBibHVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhpZGVSZXN1bHRzT25CbHVyID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZWQgdG8gY2hvb3NlIHRoZSBmaXJzdCBpdGVtIGluIHR5cGVhaGVhZCBjb250YWluZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VsZWN0Rmlyc3RJdGVtID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZWQgdG8gYWN0aXZlL2luYWN0aXZlIHRoZSBmaXJzdCBpdGVtIGluIHR5cGVhaGVhZCBjb250YWluZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNGaXJzdEl0ZW1BY3RpdmUgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdXNlZCB0byBjaG9vc2Ugc2V0IG1pbmltYWwgbm8gb2YgY2hhcmFjdGVycyB0aGF0IG5lZWRzIHRvXG4gICAgICAgICAqIGJlIGVudGVyZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5taW5MZW5ndGggPSAxO1xuICAgIH1cbiAgICBUeXBlYWhlYWRDb25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbiAgICBdO1xuICAgIHJldHVybiBUeXBlYWhlYWRDb25maWc7XG59KCkpO1xuZXhwb3J0IHsgVHlwZWFoZWFkQ29uZmlnIH07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBzZXRzIHVzZSBhZGFwdGl2ZSBwb3NpdGlvblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuYWRhcHRpdmVQb3NpdGlvbjtcbiAgICAvKipcbiAgICAgKiB0dXJuIG9uL29mZiBhbmltYXRpb25cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLmlzQW5pbWF0ZWQ7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBoaWRlIHJlc3VsdHMgb24gYmx1clxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuaGlkZVJlc3VsdHNPbkJsdXI7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjaG9vc2UgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuc2VsZWN0Rmlyc3RJdGVtO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gYWN0aXZlL2luYWN0aXZlIHRoZSBmaXJzdCBpdGVtIGluIHR5cGVhaGVhZCBjb250YWluZXJcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLmlzRmlyc3RJdGVtQWN0aXZlO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gY2hvb3NlIHNldCBtaW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0b1xuICAgICAqIGJlIGVudGVyZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUubWluTGVuZ3RoO1xufVxuIl19