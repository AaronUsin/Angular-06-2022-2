/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Provides default configuration values for timepicker
 */
import * as ɵngcc0 from '@angular/core';
var TimepickerConfig = /** @class */ (function () {
    function TimepickerConfig() {
        /**
         * hours change step
         */
        this.hourStep = 1;
        /**
         * hours change step
         */
        this.minuteStep = 5;
        /**
         * seconds changes step
         */
        this.secondsStep = 10;
        /**
         * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
         */
        this.showMeridian = true;
        /**
         * meridian labels based on locale
         */
        this.meridians = ['AM', 'PM'];
        /**
         * if true hours and minutes fields will be readonly
         */
        this.readonlyInput = false;
        /**
         * if true hours and minutes fields will be disabled
         */
        this.disabled = false;
        /**
         * if true scroll inside hours and minutes inputs will change time
         */
        this.mousewheel = true;
        /**
         * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
         */
        this.arrowkeys = true;
        /**
         * if true spinner arrows above and below the inputs will be shown
         */
        this.showSpinners = true;
        /**
         * show seconds in timepicker
         */
        this.showSeconds = false;
        /**
         * show minutes in timepicker
         */
        this.showMinutes = true;
    }
TimepickerConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TimepickerConfig, factory: function TimepickerConfig_Factory(t) { return new (t || TimepickerConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TimepickerConfig, [{
        type: Injectable
    }], function () { return []; }, { hourStep: [], minuteStep: [], secondsStep: [], showMeridian: [], meridians: [], readonlyInput: [], disabled: [], mousewheel: [], arrowkeys: [], showSpinners: [], showSeconds: [], showMinutes: [] });
    return TimepickerConfig;
}());
export { TimepickerConfig };
if (false) {
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.hourStep;
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.minuteStep;
    /**
     * seconds changes step
     * @type {?}
     */
    TimepickerConfig.prototype.secondsStep;
    /**
     * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
     * @type {?}
     */
    TimepickerConfig.prototype.showMeridian;
    /**
     * meridian labels based on locale
     * @type {?}
     */
    TimepickerConfig.prototype.meridians;
    /**
     * if true hours and minutes fields will be readonly
     * @type {?}
     */
    TimepickerConfig.prototype.readonlyInput;
    /**
     * if true hours and minutes fields will be disabled
     * @type {?}
     */
    TimepickerConfig.prototype.disabled;
    /**
     * if true scroll inside hours and minutes inputs will change time
     * @type {?}
     */
    TimepickerConfig.prototype.mousewheel;
    /**
     * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
     * @type {?}
     */
    TimepickerConfig.prototype.arrowkeys;
    /**
     * if true spinner arrows above and below the inputs will be shown
     * @type {?}
     */
    TimepickerConfig.prototype.showSpinners;
    /**
     * show seconds in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showSeconds;
    /**
     * show minutes in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showMinutes;
    /**
     * minimum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.min;
    /**
     * maximum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.max;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL2Fhcm9uL09uZURyaXZlL0Rlc2t0b3AvQW5ndWxhci0wNi0yMDIyLTIvTm9ydGFsaSBwcm9vdml0w7bDti9hbmd1bGFyLWJha2VyeXNob3Avbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvdGltZXBpY2tlci9lc201L3RpbWVwaWNrZXIuY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FrREs7Ozs7NE9BR0MiLCJmaWxlIjoidGltZXBpY2tlci5jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBQcm92aWRlcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdmFsdWVzIGZvciB0aW1lcGlja2VyXG4gKi9cbnZhciBUaW1lcGlja2VyQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVwaWNrZXJDb25maWcoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBob3VycyBjaGFuZ2Ugc3RlcFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ob3VyU3RlcCA9IDE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBob3VycyBjaGFuZ2Ugc3RlcFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5taW51dGVTdGVwID0gNTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNlY29uZHMgY2hhbmdlcyBzdGVwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlY29uZHNTdGVwID0gMTA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0cnVlIHdvcmtzIGluIDEySCBtb2RlIGFuZCBkaXNwbGF5cyBBTS9QTS4gSWYgZmFsc2Ugd29ya3MgaW4gMjRIIG1vZGUgYW5kIGhpZGVzIEFNL1BNXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3dNZXJpZGlhbiA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtZXJpZGlhbiBsYWJlbHMgYmFzZWQgb24gbG9jYWxlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1lcmlkaWFucyA9IFsnQU0nLCAnUE0nXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRydWUgaG91cnMgYW5kIG1pbnV0ZXMgZmllbGRzIHdpbGwgYmUgcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVhZG9ubHlJbnB1dCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogaWYgdHJ1ZSBob3VycyBhbmQgbWludXRlcyBmaWVsZHMgd2lsbCBiZSBkaXNhYmxlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogaWYgdHJ1ZSBzY3JvbGwgaW5zaWRlIGhvdXJzIGFuZCBtaW51dGVzIGlucHV0cyB3aWxsIGNoYW5nZSB0aW1lXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vdXNld2hlZWwgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogaWYgdHJ1ZSB0aGUgdmFsdWVzIG9mIGhvdXJzIGFuZCBtaW51dGVzIGNhbiBiZSBjaGFuZ2VkIHVzaW5nIHRoZSB1cC9kb3duIGFycm93IGtleXMgb24gdGhlIGtleWJvYXJkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFycm93a2V5cyA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0cnVlIHNwaW5uZXIgYXJyb3dzIGFib3ZlIGFuZCBiZWxvdyB0aGUgaW5wdXRzIHdpbGwgYmUgc2hvd25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvd1NwaW5uZXJzID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNob3cgc2Vjb25kcyBpbiB0aW1lcGlja2VyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3dTZWNvbmRzID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzaG93IG1pbnV0ZXMgaW4gdGltZXBpY2tlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaG93TWludXRlcyA9IHRydWU7XG4gICAgfVxuICAgIFRpbWVwaWNrZXJDb25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbiAgICBdO1xuICAgIHJldHVybiBUaW1lcGlja2VyQ29uZmlnO1xufSgpKTtcbmV4cG9ydCB7IFRpbWVwaWNrZXJDb25maWcgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIGhvdXJzIGNoYW5nZSBzdGVwXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuaG91clN0ZXA7XG4gICAgLyoqXG4gICAgICogaG91cnMgY2hhbmdlIHN0ZXBcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5taW51dGVTdGVwO1xuICAgIC8qKlxuICAgICAqIHNlY29uZHMgY2hhbmdlcyBzdGVwXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuc2Vjb25kc1N0ZXA7XG4gICAgLyoqXG4gICAgICogaWYgdHJ1ZSB3b3JrcyBpbiAxMkggbW9kZSBhbmQgZGlzcGxheXMgQU0vUE0uIElmIGZhbHNlIHdvcmtzIGluIDI0SCBtb2RlIGFuZCBoaWRlcyBBTS9QTVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNob3dNZXJpZGlhbjtcbiAgICAvKipcbiAgICAgKiBtZXJpZGlhbiBsYWJlbHMgYmFzZWQgb24gbG9jYWxlXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubWVyaWRpYW5zO1xuICAgIC8qKlxuICAgICAqIGlmIHRydWUgaG91cnMgYW5kIG1pbnV0ZXMgZmllbGRzIHdpbGwgYmUgcmVhZG9ubHlcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5yZWFkb25seUlucHV0O1xuICAgIC8qKlxuICAgICAqIGlmIHRydWUgaG91cnMgYW5kIG1pbnV0ZXMgZmllbGRzIHdpbGwgYmUgZGlzYWJsZWRcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5kaXNhYmxlZDtcbiAgICAvKipcbiAgICAgKiBpZiB0cnVlIHNjcm9sbCBpbnNpZGUgaG91cnMgYW5kIG1pbnV0ZXMgaW5wdXRzIHdpbGwgY2hhbmdlIHRpbWVcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5tb3VzZXdoZWVsO1xuICAgIC8qKlxuICAgICAqIGlmIHRydWUgdGhlIHZhbHVlcyBvZiBob3VycyBhbmQgbWludXRlcyBjYW4gYmUgY2hhbmdlZCB1c2luZyB0aGUgdXAvZG93biBhcnJvdyBrZXlzIG9uIHRoZSBrZXlib2FyZFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLmFycm93a2V5cztcbiAgICAvKipcbiAgICAgKiBpZiB0cnVlIHNwaW5uZXIgYXJyb3dzIGFib3ZlIGFuZCBiZWxvdyB0aGUgaW5wdXRzIHdpbGwgYmUgc2hvd25cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zaG93U3Bpbm5lcnM7XG4gICAgLyoqXG4gICAgICogc2hvdyBzZWNvbmRzIGluIHRpbWVwaWNrZXJcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zaG93U2Vjb25kcztcbiAgICAvKipcbiAgICAgKiBzaG93IG1pbnV0ZXMgaW4gdGltZXBpY2tlclxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNob3dNaW51dGVzO1xuICAgIC8qKlxuICAgICAqIG1pbmltdW0gdGltZSB1c2VyIGNhbiBzZWxlY3RcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5taW47XG4gICAgLyoqXG4gICAgICogbWF4aW11bSB0aW1lIHVzZXIgY2FuIHNlbGVjdFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLm1heDtcbn1cbiJdfQ==